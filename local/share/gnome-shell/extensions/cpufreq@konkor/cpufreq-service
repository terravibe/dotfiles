#!/usr/bin/gjs

/*
 * This is a part of CPUFreq Manager
 * Copyright (C) 2016-2019 konkor <konkor.github.io>
 *
 * Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * You should have received a copy of the GNU General Public License along
 * with this program. If not, see <http://www.gnu.org/licenses/>.
 */

const Gio = imports.gi.Gio;
const GLib = imports.gi.GLib;
const Lang = imports.lang;
const System = imports.system;

const APPDIR = get_appdir ();
imports.searchPath.unshift(APPDIR);

const Convenience = imports.convenience;

const MONITOR_KEY = 'monitor';
const LABEL_KEY = 'label';
const LABEL_SHOW_KEY = 'label-show';
const UNITS_SHOW_KEY = 'units-show';
const FREQ_SHOW_KEY = 'frequency-show';
const GOVS_SHOW_KEY = 'governors-show';
const LOAD_SHOW_KEY = 'load-show';

const COLOR_SHOW_KEY = 'color-show';
const COLOR_SHOW_CUSTOM_KEY = 'color-show-custom';
const COLOR_SHOW_CUSTOM_NORMAL_KEY = 'color-show-custom-normal';
const COLOR_SHOW_CUSTOM_WARNING_KEY = 'color-show-custom-warning';
const COLOR_SHOW_CUSTOM_CRITICAL_KEY = 'color-show-custom-critical';

var DEBUGING = false;
let settings = null;
let monitor_timeout = 500;
let label_text = "";
let label_show = false;
let units_show = true;
let frequency_show = true;
let governor_show = false;
let load_show = false;

let color_show = false;
let color_show_custom = false;
let color_show_default_normal = ''; //'#33d552';
let color_show_default_warning = 'orange';
let color_show_default_critical = 'red';
let color_show_custom_normal = '#ebebeb';
let color_show_custom_warning = '#ebebeb';
let color_show_custom_critical = '#ff0000';

let style_state = -1;  //-1 - trigger change, 0 - no color/style, 1,2,3 - default color/style, 4,5,6 - custom color/style

let streams = [];
let freqs = [];
let governors = [];
let loading = 0;
let cpu_present = 1;
let cpu_online = 1;
let gcc = 0;

let event = 0;
let init_event = 0;

const OBJECT_PATH = '/org/konkor/cpufreq/service';
const CpufreqServiceIface = '<node> \
<interface name="org.konkor.cpufreq.service"> \
<property name="Frequency" type="t" access="read"/> \
<signal name="FrequencyChanged"> \
  <arg name="title" type="s"/> \
</signal> \
<signal name="LoadingEvent"> \
  <arg name="loading" type="t"/> \
</signal> \
<signal name="StyleChanged"> \
  <arg name="style" type="s"/> \
</signal> \
</interface> \
</node>';
const CpufreqServiceInfo  = Gio.DBusInterfaceInfo.new_for_xml (CpufreqServiceIface);

var CpufreqService = new Lang.Class ({
    Name: 'CpufreqService',
    Extends: Gio.Application,

    _init: function (args) {
        GLib.set_prgname ("cpufreq-service");
        this.parent ({
            application_id: "org.konkor.cpufreq.service",
            flags: Gio.ApplicationFlags.IS_SERVICE
        });
        GLib.set_application_name ("CPUFreq Service");

        monitor_timeout = settings.get_int (MONITOR_KEY);
        units_show = settings.get_boolean (UNITS_SHOW_KEY);
        label_show = settings.get_boolean (LABEL_SHOW_KEY);
        frequency_show = settings.get_boolean (FREQ_SHOW_KEY);
        governor_show = settings.get_boolean (GOVS_SHOW_KEY);
        load_show = settings.get_boolean (LOAD_SHOW_KEY);
        label_text = settings.get_string (LABEL_KEY);

        color_show = settings.get_boolean (COLOR_SHOW_KEY);
        color_show_custom = settings.get_boolean (COLOR_SHOW_CUSTOM_KEY);
        color_show_custom_normal = settings.get_string (COLOR_SHOW_CUSTOM_NORMAL_KEY);
        color_show_custom_warning = settings.get_string (COLOR_SHOW_CUSTOM_WARNING_KEY);
        color_show_custom_critical = settings.get_string (COLOR_SHOW_CUSTOM_CRITICAL_KEY);
    },

    vfunc_startup: function() {
        this.parent();
        this.init ();
        this.hold ();
    },

    vfunc_activate: function() {
        this.connect("destroy", () => {
            this.remove_events ();
        });
    },

    init: function() {
        debug ("init");
        this.dbus = Gio.DBusExportedObject.wrapJSObject (CpufreqServiceInfo, this);
        this.dbus.export (Gio.DBus.session, OBJECT_PATH);
        cpu_present = Convenience.get_cpu_number ();
        this.max0 = 0;
        this.title = "-- \u3393";
        this.init_streams ();
        this.update_freq ();
        this.add_event ();
        settings.connect ("changed", this.on_settings.bind (this));
        GLib.timeout_add (200, 8000, () => {
          let cores = GLib.get_num_processors ();
          if (cores != cpu_online) this.init_streams ();
          if (!frequency_show) this.gov0 = "";
          return true;
        });
    },

    on_settings: function (o, key) {
      if (key == MONITOR_KEY) {
        monitor_timeout =  o.get_int (MONITOR_KEY);
        this.add_event ();
      } else if (key == UNITS_SHOW_KEY) {
        units_show = o.get_boolean (UNITS_SHOW_KEY);
      } else if (key == LABEL_SHOW_KEY) {
        label_show = o.get_boolean (LABEL_SHOW_KEY);
      } else if (key == LOAD_SHOW_KEY) {
        load_show = o.get_boolean (LOAD_SHOW_KEY);
      } else if (key == GOVS_SHOW_KEY) {
        governor_show = o.get_boolean (GOVS_SHOW_KEY);
      } else if (key == LABEL_KEY) {
        label_text = o.get_string (LABEL_KEY);
      } else if (key == FREQ_SHOW_KEY) {
        frequency_show = o.get_boolean (FREQ_SHOW_KEY);
      } else if (key == COLOR_SHOW_KEY) {
        color_show = o.get_boolean (COLOR_SHOW_KEY);
      } else if (key == COLOR_SHOW_CUSTOM_KEY) {
        color_show_custom = o.get_boolean (COLOR_SHOW_CUSTOM_KEY);
      } else if (key == COLOR_SHOW_CUSTOM_NORMAL_KEY) {
        color_show_custom_normal = o.get_string (COLOR_SHOW_CUSTOM_NORMAL_KEY);
      } else if (key == COLOR_SHOW_CUSTOM_WARNING_KEY) {
        color_show_custom_warning = o.get_string (COLOR_SHOW_CUSTOM_WARNING_KEY);
      } else if (key == COLOR_SHOW_CUSTOM_CRITICAL_KEY) {
        color_show_custom_critical = o.get_string (COLOR_SHOW_CUSTOM_CRITICAL_KEY);
      }

      style_state = -1;
      this.max0 = 0;
    },

     add_event: function () {
        if (event != 0) {
            GLib.Source.remove (event);
            event = 0;
        }
        if (monitor_timeout > 0)
            event = GLib.timeout_add (100, monitor_timeout, () => {
                this.update_freq ();
                return true;
            });
        else {
          this.dbus.emit_signal ("FrequencyChanged", new GLib.Variant("(s)", [""]));
          this.quit ();
        }
    },

    init_streams: function() {
        debug ("init_streams");
        if (init_event != 0) {
            GLib.Source.remove (init_event);
            init_event = 0;
        }
        streams.forEach (stream => {
            try {
                if (stream) stream.close (null);
            } catch (e) {}
        });
        cpu_online = GLib.get_num_processors ();
        freqs = new Array (cpu_online);
        governors = new Array (cpu_online);
        streams = [];
        for (let key = 0; key < cpu_present; key++) {
            if (GLib.file_test ('/sys/devices/system/cpu/cpu' + key + '/topology', GLib.FileTest.EXISTS)) {
                let f = Gio.File.new_for_path ('/sys/devices/system/cpu/cpu' + key + '/cpufreq/scaling_cur_freq');
                streams.push (new Gio.DataInputStream({ base_stream: f.read(null) }));
            } else {
                streams.push (null);
            }
        }
    },

    update_freq: function () {
        let m = 0, units, i = 0, g, l, s = 0;
        streams.forEach (stream => {
            if (stream) {
              if (frequency_show) this.read_line (stream);
              if (governor_show) this.get_governors (i);
            }
            i++;
        });
        if (load_show || color_show) this.get_loading ();
        for (i = 0; i < cpu_online; i++)
            if (freqs[i] && freqs[i] > m) m = freqs[i];
        if (governor_show) g = this.governor;
        if (load_show) l = this.loadavg;
        if ((m != this.max0) || (g != this.gov0)) {
            if (m == 0) m = this.max0;
            if (frequency_show)
              if (m >= 1000000) {
                this.title = (m / 1000000).toFixed(2).toString ();
                units = "\u3393";
              } else {
                this.title = (m / 1000).toFixed(0).toString ();
                units = " \u3392";
              }
            else this.title = "";
            if (units_show && frequency_show) this.title += units;
            if (governor_show && g) {
              this.title += " " + g;
              this.gov0 = g;
            }
            if (load_show) this.title += " " + l;
            if (label_show) this.title += " " + label_text;
            this.dbus.emit_signal ("FrequencyChanged", new GLib.Variant("(s)", [this.title]));
            this.max0 = m;
        }
        if (color_show) {
          s = this.stylestate;
        }
        if (s != style_state) {
            this.dbus.emit_signal ("StyleChanged", new GLib.Variant("(s)", [this.get_stylestring (s)]));
            style_state = s;
        }
        gcc++;
        if (gcc*monitor_timeout > 1000) {
            gcc = 0;
            System.gc ();
        }
    },

    get_governors: function (core) {
        core = core || 0;
        let path = '/sys/devices/system/cpu/cpu' + core + '/cpufreq/scaling_governor';
        let file = Gio.file_new_for_path (path);

        file.load_contents_async (null, (o, res) => {
            let [success, contents] = o.load_contents_finish (res);
            if (!success) return;
            try {
                contents = Convenience.byteArrayToString (contents).toString ().split ("\n")[0].trim ();
                governors.unshift (contents);
                governors.splice (governors.length - 1, 1);
            } catch (e) {}
        });
    },

    get governor () {
        let g = governors[0];
        for (let i = 1; i < cpu_online; i++)
            if (governors[i] && governors[i] != g) g = "mixed";
        if (g) g = g.trim().toLowerCase ();
        if (g == "mixed") g = "\u25cd";
        else if (g == "powersave") g = "\uf06c";
        else if (g == "performance") g = "\uf197";
        else if (g == "ondemand") g = "\uf0e7";
        else if (g == "conservative") g = "\ue976";
        else if (g == "schedutil") g = "\ue953";
        else if (g == "userspace") g = "\uf007";
        else g = "\uf0e7";
        return g;
    },

    get_loading: function () {
        let file = Gio.file_new_for_path ('/proc/loadavg');

        file.load_contents_async (null, (o, res) => {
            let [success, contents] = o.load_contents_finish (res);
            if (!success) return;
            try {
                contents = Convenience.byteArrayToString (contents).toString ().split ("\n")[0].split (" ")[0].trim ();
                loading = Math.round (parseFloat (contents) * 100);
            } catch (e) {}
        });
    },

    get loadavg () {
        let l;
        if (loading > cpu_online * 100) {
          l = "☹";
        } else if (loading > cpu_online * 75) {
          l = "";
        } else {
          l = "☺";
        }
        return l;
    },

    get stylestate () {
        let s;
        if (color_show) {
          if (loading > cpu_online * 100) {
            s = 3;
          } else if (loading > cpu_online * 75) {
            s = 2;
          } else {
            s = 1;
          }
          if (color_show_custom) s += 3;  // match with stale_state definition
        } else {
          s = 0;
        }
        return s;
    },

    get_stylestring: function (state) {
        let s;
        switch (state) {
          case 1:
            s = "color:" + color_show_default_normal + ";";
            break;
          case 2:
            s = "color:" + color_show_default_warning + ";";
            break;
          case 3:
            s = "color:" + color_show_default_critical + ";";
            break;
          case 4:
            s = "color:" + color_show_custom_normal + ";";
            break;
          case 5:
            s = "color:" + color_show_custom_warning + ";";
            break;
          case 6:
            s = "color:" + color_show_custom_critical + ";";
            break;
          default:
            s = "";
        }
        return s;
    },

    read_line: function (dis) {
        if (dis == null) return;
        try {
            dis.seek (0, GLib.SeekType.SET, null);
            dis.read_line_async (100, null, this.read_done);
        } catch (e) {
            init_event = GLib.timeout_add (0, 25, this.init_streams.bind (this));
            //error (e);
        }
    },

    read_done: function (stream, res) {
        try {
            let [line,] = stream.read_line_finish (res);
            if (line) {
                var n = parseInt (Convenience.byteArrayToString(line));
                if (Number.isInteger (n)) {
                    freqs.unshift (n);
                    freqs.splice (freqs.length - 1, 1);
                }
            }
        } catch (e) {}
    },

    remove_events: function () {
        if (this.dbus) this.dbus.unexport ();
        if (event != 0) GLib.Source.remove (event);
        if (init_event != 0) GLib.Source.remove (init_event);
        event = 0; init_event = 0;
    }
});

function getCurrentFile () {
    let stack = (new Error()).stack;
    let stackLine = stack.split('\n')[1];
    if (!stackLine)
        throw new Error ('Could not find current file');
    let match = new RegExp ('@(.+):\\d+').exec(stackLine);
    if (!match)
        throw new Error ('Could not find current file');
    let path = match[1];
    let file = Gio.File.new_for_path (path);
    return [file.get_path(), file.get_parent().get_path(), file.get_basename()];
}

function get_appdir () {
    let s = getCurrentFile ()[1];
    if (GLib.file_test (s + "/extension.js", GLib.FileTest.EXISTS)) return s;
    s = GLib.get_home_dir () + "/.local/share/gnome-shell/extensions/cpufreq@konkor";
    if (GLib.file_test (s + "/extension.js", GLib.FileTest.EXISTS)) return s;
    s = "/usr/share/gnome-shell/extensions/cpufreq@konkor";
    if (GLib.file_test (s + "/extension.js", GLib.FileTest.EXISTS)) return s;
    throw "Installation not found...";
    return s;
}

function debug (msg) {
    if (msg && DEBUGING) print ("[cpufreq][service] " + msg);
}

function error (msg) {
    print ("[cpufreq][service] (EE) " + msg);
}

settings = Convenience.getSettings ();
try {
    let app = new CpufreqService (ARGV);
    app.run (ARGV);
} catch (e) {
    print (e.message);
}
